trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          name: moviesagent
          demands:
            - Agent.Name -equals MoviesPipelineAgent
        timeoutInMinutes: 30

        steps:
          - task: UseDotNet@2
            displayName: Use .NET Core sdk
            inputs:
              packageType: 'sdk'
              version: '8.x'
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - script: |
              echo "##[section]Changing to the Movies.Api project directory"
              cd "Movies App/Movies.Api"  # Navigate to the Movies.Api project directory
              echo "##[section]Building the project"
              dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
            displayName: Build and Publish

          # test section
          # - script: |
          #     echo "##[section]Running tests"
          #     dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal
          #   displayName: Test

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: Publish Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              artifactName: 'drop'
              publishLocation: 'Pipeline'

  - stage: Approval
    displayName: "Approval Before Deploy"
    dependsOn: Build
    jobs:
      - job: ManualApproval
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please approve or reject the deployment.'

  - stage: DeployToProduction
    displayName: "Production"
    dependsOn: Approval
    condition: succeeded()
    jobs:
      - deployment: Deploy
        environment: Production
        pool:
          name: moviesagent
          demands:
            - Agent.Name -equals MoviesPipelineAgent

        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: AzureRmWebAppDeployment@4
                  inputs:
                    azureSubscription: "Visual Studio Enterprise Subscription(e5855b08-7ae6-492b-b26a-0729c22fa918)"
                    WebAppName: "moviesBackEnd"
                    package: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
